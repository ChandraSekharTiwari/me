{"version":3,"sources":["images/spider.svg","components/header/header.js","components/home/Home.js","components/work/Work.js","components/container/Container.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","ref","current","scrollIntoView","behavior","className","href","onClick","scroll","props","scrollRef","React","Component","Home","shiftX","shiftY","containerRef","createRef","state","transformIcon","e","this","clientX","clientY","setState","id","style","height","window","innerHeight","onMouseMove","bind","transform","src","spiderweb","MyWork","Container","Fragment","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,oC,uHCGtBC,G,2LACVC,GACHA,EAAIC,QAAQC,eAAe,CAACC,SAAU,a,+BAEhC,IAAD,OACL,OACI,yBAAKC,UAAU,eACX,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,gBAEX,6BAAK,uBAAGC,KAAK,QAAQC,QAAS,WAAO,EAAKC,OAAO,EAAKC,MAAMC,aAAvD,WACL,6BAAK,gD,GAXOC,IAAMC,Y,iBCCrBC,G,kBACpB,WAAYJ,GAAQ,IAAD,8BACZ,4CAAMA,KACDK,OAAS,EACd,EAAKC,OAAS,EACd,EAAKC,aAAeL,IAAMM,YAC1B,EAAKC,MAAQ,CACTC,cAAc,4DANN,E,sHAYJC,GACRC,KAAKP,OAASM,EAAEE,SAAYF,EAAEE,QAAQ,GAAK,EAC3CD,KAAKN,OAASK,EAAEG,SAAYH,EAAEG,QAAQ,GAAK,EAC3CF,KAAKG,SAAS,CAACL,cAAa,uDAAkDE,KAAKP,OAAvD,aAAkEO,KAAKN,OAAvE,e,+BAG5B,OACI,yBAAKU,GAAG,OAAOxB,IAAKoB,KAAKL,aAAcU,MAAO,CAAEC,OAAO,QAAD,OAAUC,OAAOC,YAAjB,eAA2CxB,UAAU,YAAYyB,YAAaT,KAAKS,YAAYC,KAAKV,OACtJ,yBAAKhB,UAAU,gBAAgBqB,MAAO,CAAEM,UAAWX,KAAKH,MAAMC,eAAiBc,IAAKC,W,GArBlEvB,IAAMC,YCDnBuB,G,uLAEb,OACI,yBAAKV,GAAG,OAAOC,MAAO,CAAEC,OAAO,QAAD,OAAUC,OAAOC,YAAjB,eAA2CxB,UAAU,uB,GAH3DM,IAAMC,YCCrBwB,E,YACpB,WAAY3B,GAAQ,qEACPA,I,mHAON,OACI,kBAAC,IAAM4B,SAAP,KACI,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAZuB1B,IAAMC,WCoB9B0B,G,kBAjBb,aAAe,IAAD,8BACZ,+CACK5B,UAAYC,IAAMM,YAFX,E,mHAQZ,OACE,yBAAKZ,UAAU,MAAMJ,IAAKoB,KAAKX,WAC7B,kBAAC,EAAD,CAAQA,UAAWW,KAAKX,YACxB,kBAAC,EAAD,W,GAZUC,IAAMC,YCMJ2B,QACW,cAA7BX,OAAOY,SAASC,UAEe,UAA7Bb,OAAOY,SAASC,UAEhBb,OAAOY,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.766ce559.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spider.c665118a.svg\";","import React from 'react';\r\nimport './header.scss';\r\n\r\nexport default class Header extends React.Component{\r\n    scroll(ref) {\r\n        ref.current.scrollIntoView({behavior: 'smooth'})\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"main-header\">\r\n                <div className=\"header-container\">\r\n                    <div className=\"links-holder\">\r\n                        {/* <div><a href=\"#home\"> Home </a></div> */}\r\n                        <div><a href=\"#work\" onClick={() => {this.scroll(this.props.scrollRef)}}> Work </a></div>\r\n                        <div><a> Contact </a></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport spiderweb from '../../images/spider.svg';\r\nimport './Home.scss';\r\n\r\nexport default class Home extends React.Component {\r\n\tconstructor(props) {\r\n        super(props);\r\n        this.shiftX = 0;\r\n        this.shiftY = 0;\r\n        this.containerRef = React.createRef();\r\n        this.state = {\r\n            transformIcon: `matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)`\r\n        }\r\n    }\r\n    componentDidMount() {\r\n    }\r\n\r\n    onMouseMove(e) {\r\n        this.shiftX = e.clientX ? - e.clientX/20 : 0;\r\n        this.shiftY = e.clientY ? - e.clientY/20 : 0;\r\n        this.setState({transformIcon :`matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, ${this.shiftX}, ${this.shiftY}, 0, 1)`});\r\n    }\r\n    render() {\r\n        return (\r\n            <div id=\"home\" ref={this.containerRef} style={{ height: `calc(${window.innerHeight}px - 60px)`}} className=\"container\" onMouseMove={this.onMouseMove.bind(this)}>\r\n                <img className=\"moving-spider\" style={{ transform: this.state.transformIcon }} src={spiderweb} /> \r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './Work.scss';\r\n\r\nexport default class MyWork extends React.Component {\r\n    render() {\r\n        return (\r\n            <div id=\"work\" style={{ height: `calc(${window.innerHeight}px - 60px)`}} className=\"work-container\">\r\n\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport Home from '../home/Home';\r\nimport Work from '../work/Work';\r\n\r\nexport default class Container extends React.Component {\r\n\tconstructor(props) {\r\n        super(props);\r\n    }\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Home></Home>\r\n                <Work></Work>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './App.scss';\r\nimport Header from './components/header/header';\r\nimport Container from '../src/components/container/Container';\r\nimport { render } from '@testing-library/react';\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.scrollRef = React.createRef();\r\n  }\r\n  componentDidMount() {\r\n    \r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"App\" ref={this.scrollRef}>\r\n        <Header scrollRef={this.scrollRef}></Header>\r\n        <Container></Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}